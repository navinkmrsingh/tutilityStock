package stock.tutility.db.tables;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import stock.tutility.db.ConnectionManager;
import stock.tutility.db.DBtype;
import stock.tutility.db.DButil;
import stock.tutility.db.beans.ScripsBse;



public class ScripsBseManager {
	
	private static Connection conn = ConnectionManager.getInstance().getConnection();
	private static final String TABLE_NAME = "tsScripsBse";
	
	public static void installTsEodBseTable(DBtype dbType){
		createTsScripsBseTable(dbType);
		addEodStatusColumn(dbType);
	}
	
	public static void createTsScripsBseTable(DBtype dbType) {
		
		String sql = "";
		
		switch (dbType) {
		case MYSQL:
			sql = "CREATE TABLE IF NOT EXISTS `" + TABLE_NAME + "` ("+
				  "`id` int(5) NOT NULL AUTO_INCREMENT,"+
				  "`scripId` int(6) NOT NULL,"+
				  "`companyName` varchar(100) NOT NULL,"+
				  "`bseCode` varchar(20) NOT NULL,"+
				  "PRIMARY KEY (`id`),"+
				  " UNIQUE KEY `scripId` (`scripId`),"+
				  " UNIQUE KEY `bseCode` (`bseCode`)"+
				") ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ";
			break;
			
		/**
		 * WARNING : Since HSQL doesn't check on itself that if a table exists or not, it falls on
		 * 			the caller to check if the desired table already exists. 
		 * 				Failing to do so will throw an SQL error for duplicate creation. 
		 */
		case HSQLDB:
			sql = "CREATE TABLE PUBLIC."+TABLE_NAME+ "(" +
					"ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY," +
					"SCRIPID INTEGER NOT NULL," +
					"COMPANYNAME VARCHAR(100) NOT NULL," +
					"BSECODE VARCHAR(20) NOT NULL," +
					"UNIQUE(SCRIPID,BSECODE)" +
				")";
			break;	
		default:
			break;
		}		
	
		DButil.createTable(dbType, TABLE_NAME, sql, conn);
		
	}
	
	public static void addEodStatusColumn(DBtype dbType) {
		String sql = "";
		switch (dbType) {
		case MYSQL:
			sql = "ALTER TABLE  `" +TABLE_NAME+"` ADD  `eodStatus` BIT( 1 ) NOT NULL DEFAULT b'0'";
			break;
		case HSQLDB:
			sql = "ALTER TABLE PUBLIC." + TABLE_NAME +" ADD EODSTATUS NUMERIC(1,0) DEFAULT 0 NOT NULL";
			break;
		default:
			break;
		}
		
		DButil.alterTable(dbType, TABLE_NAME, sql, conn);
		
	}	
	
	public static void dropTsScripsBseTable(DBtype dbType) {		
		DButil.dropTable(dbType, TABLE_NAME, conn);
	}
	
	public static boolean displayAllRows() throws SQLException {

		String sql = "SELECT scripId, companyName, bseCode, eodStatus FROM " + TABLE_NAME;
		try (				
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(sql);
				){

			int count = 0;
			System.out.println("BSE Scrip Table:");
			while (rs.next()) {
				StringBuffer bf = new StringBuffer();
				bf.append(rs.getInt("scripId") + ": ");
				bf.append(rs.getInt("eodStatus") +", ");
				bf.append(rs.getString("bseCode") +", ");
				bf.append(rs.getString("companyName"));				
				System.out.println(bf.toString());
				count++;
			}
			if(count == 0){
				System.out.println("*********** No Result to Display ***********");
			}else{
				System.out.println("Total output: " + count);
			}
		}
		catch (SQLException e) {
			System.err.println(e);
			return false;
		} 
		return true;
	}

	public static boolean insert(ScripsBse bean) throws Exception {

		String sql = "INSERT into " + TABLE_NAME + " (scripId, companyName, bseCode) " +
				"VALUES (?, ?, ?)";
		ResultSet keys = null;
		
		try (
				PreparedStatement stmt = conn.prepareStatement(sql, 
						Statement.RETURN_GENERATED_KEYS);
				) {
			
			stmt.setInt(1, bean.getScripId());
			stmt.setString(2, bean.getCompanyName());
			stmt.setString(3, bean.getBseCode());
			int affected = stmt.executeUpdate();
			
			if (affected != 0) {
				keys = stmt.getGeneratedKeys();
				keys.next();
				int newKey = keys.getInt(1);
				bean.setScripId(newKey);
			} else {
				System.err.println("No rows affected");
			}
			
		} catch (SQLException e) {
			System.err.println(e);
			return false;
		} finally{
			if(keys != null) keys.close();
		}
		return true;
	}
	
	public static boolean updateEodStatus(int scripId) throws Exception {		

		String sql = "UPDATE " + TABLE_NAME + 
				" SET eodStatus=1" +
				" WHERE scripId="+scripId;
		ResultSet keys = null;
		
		try (
				PreparedStatement stmt = conn.prepareStatement(sql, 
						Statement.RETURN_GENERATED_KEYS);
				) {		
			
			int affected = stmt.executeUpdate();
			
			if (affected != 0) {
				System.out.println("Eod Status for scripId: "+scripId+" changed to 1!");
				
			} else {
				System.err.println("No rows affected");
			}
			
		} catch (SQLException e) {
			System.err.println(e);
			return false;
		} finally{
			if(keys != null) keys.close();
		}
		return true;
	}
	
	public static boolean resetEodStatus() throws Exception {		

		String sql = "UPDATE " + TABLE_NAME + 
				" SET eodStatus=0" +
				" WHERE eodStatus=1";
		ResultSet keys = null;
		
		try (
				PreparedStatement stmt = conn.prepareStatement(sql, 
						Statement.RETURN_GENERATED_KEYS);
				) {		
			
			int affected = stmt.executeUpdate();
			
			if (affected != 0) {
				System.out.println("Eod Status for all Scrips changed BACK to 0!");
				
			} else {
				System.err.println("No rows affected");
			}
			
		} catch (SQLException e) {
			System.err.println(e);
			return false;
		} finally{
			if(keys != null) keys.close();
		}
		return true;
	}
}
