package stock.tutility.db.tables;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import stock.tutility.db.ConnectionManager;
import stock.tutility.db.DBtype;
import stock.tutility.db.DButil;
import stock.tutility.db.beans.ScripsNse;

public class ScripsNseManager {
	
	private static Connection conn = ConnectionManager.getInstance().getConnection();
	private static final String TABLE_NAME = "tsScripsNse";

	public static void createTsScripsNseTable(DBtype dbType) {
		
		String sql = "";
		
		switch (dbType) {
		case MYSQL:
			sql = "CREATE TABLE IF NOT EXISTS `"+ TABLE_NAME +"` (" +
					  "`id` int(5) NOT NULL AUTO_INCREMENT," +
					  "`nseCode` varchar(25) NOT NULL,"+
					  "`companyName` varchar(100) NOT NULL,"+
					  "`yahooCode` varchar(25) NOT NULL,"+
					  "PRIMARY KEY (`id`),"+
					  "UNIQUE KEY `nseCode` (`nseCode`,`yahooCode`)"+
					") ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ";
			break;
			
		/**
		 * WARNING : Since HSQL doesn't check on itself that if a table exists or not, it falls on
		 * 			the caller to check if the desired table already exists. 
		 * 				Failing to do so will throw an SQL error for duplicate creation. 
		 */
		case HSQLDB:
			sql = "CREATE TABLE PUBLIC."+TABLE_NAME+
					"(ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,"+
					"NSECODE VARCHAR(25),"+
					"COMPANYNAME VARCHAR(100) NOT NULL,"+
					"YAHOOCODE VARCHAR(25) NOT NULL,"+
					"PRIMARY KEY (ID),"+
					"UNIQUE (NSECODE, YAHOOCODE))";
			break;	
		default:
			break;
		}		
	
		DButil.createTable(dbType, TABLE_NAME, sql, conn);
		
	}
	
	public static void dropTsScripsNseTable(DBtype dbType) {		
		DButil.dropTable(dbType, TABLE_NAME, conn);
	}
	
	public static boolean displayAllRows() throws SQLException {

		String sql = "SELECT nseCode, companyName, yahooCode FROM " + TABLE_NAME;
		try (
//				Connection conn = DButil.getConnection(dbtype);
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(sql);
				){

			int count = 0;
			System.out.println("NSE Scrip Table:");
			while (rs.next()) {
				StringBuffer bf = new StringBuffer();
				bf.append(rs.getString("nseCode") + ": ");
				bf.append(rs.getString("yahooCode") +", ");
				bf.append(rs.getString("companyName"));
				System.out.println(bf.toString());
				count++;
			}
			if(count == 0){
				System.out.println("*********** No Result to Display ***********");
			}else{
				System.out.println("Total output: " + count);
			}
			
		}catch (SQLException e) {
			System.err.println(e);
			return false;
		} 
		return true;
	}
	
	public static boolean insert(ScripsNse bean, DBtype dbtype) throws Exception {

		String sql = "INSERT into " + TABLE_NAME + " (nseCode, companyName, yahooCode) " +
				"VALUES (?, ?, ?)";
		ResultSet keys = null;
		
		try (
//				Connection conn = DButil.getConnection(dbtype);
				PreparedStatement stmt = conn.prepareStatement(sql, 
						Statement.RETURN_GENERATED_KEYS);
				) {
			
			stmt.setString(1, bean.getNseCode());
			stmt.setString(2, bean.getCompanyName());
			stmt.setString(3, bean.getYahooCode());
			int affected = stmt.executeUpdate();
			
			if (affected != 0) {
				keys = stmt.getGeneratedKeys();
				keys.next();
				int newKey = keys.getInt(1);
				bean.setId(newKey);
			} else {
				System.err.println("No rows affected");
			}
			
//			if(conn != null) conn.close();
			
		} catch (SQLException e) {
			System.err.println(e);
			return false;
		} finally{
			if(keys != null) keys.close();
		}
		return true;
	}
	
}
